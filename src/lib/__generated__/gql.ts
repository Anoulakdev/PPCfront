/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nmutation Login($loginInput: LoginInput!) {\n  login(loginInput: $loginInput) {\n    accessToken\n    data {\n      _id\n      fName\n      lName\n      email\n      phone\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n": types.LoginDocument,
    "\nmutation CreateReport($createReportInput: CreateReportInput!) {\n  createReport(createReportInput: $createReportInput) {\n    _id\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n": types.CreateReportDocument,
    "\nmutation CreateDayDeclaration($createDayDeclarationInput: CreateDayPowerPurchaseInput!) {\n  createDayDeclaration(createDayDeclarationInput: $createDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n": types.CreateDayDeclarationDocument,
    "\nmutation CreateWeekPowerPurchase($createWeekPowerPurchaseInput: CreateWeekPowerPurchaseInput!) {\n  createWeekPowerPurchase(createWeekPowerPurchaseInput: $createWeekPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n": types.CreateWeekPowerPurchaseDocument,
    "\nmutation AcknowledgedDayDispatch($acknowledgedDayDispatchInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDispatch(acknowledgedDayDispatchInput: $acknowledgedDayDispatchInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedDayDispatchDocument,
    "\nmutation AcknowledgedDayDeclaration($acknowledgedDayDeclarationInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDeclaration(acknowledgedDayDeclarationInput: $acknowledgedDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedDayDeclarationDocument,
    "\nmutation CreateCustomer($createCustomerInput: CreateCustomerInput!) {\n  createCustomer(createCustomerInput: $createCustomerInput) {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n  }\n}\n": types.CreateCustomerDocument,
    "\nmutation UpdateCustomer($updateCustomerInput: UpdateCustomerInput!) {\n  updateCustomer(updateCustomerInput: $updateCustomerInput) {\n    _id\n    type\n    name\n    company\n  }\n}\n": types.UpdateCustomerDocument,
    "\nmutation RemoveCustomer($removeCustomerId: String!) {\n  removeCustomer(id: $removeCustomerId) {\n    _id\n    type\n    name\n    company\n  }\n}\n": types.RemoveCustomerDocument,
    "\nmutation CreateUser($createUserInput: CreateUserInput!) {\n  createUser(createUserInput: $createUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n": types.CreateUserDocument,
    "\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n": types.UpdateUserDocument,
    "\nmutation RemoveUser($removeUserId: String!) {\n  removeUser(id: $removeUserId) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n": types.RemoveUserDocument,
    "\nmutation AcknowledgedWeekDeclaration($acknowledgedWeekDeclaration: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDeclaration(acknowledgedWeekDeclaration: $acknowledgedWeekDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedWeekDeclarationDocument,
    "\nmutation AcknowledgedWeekDispatch($acknowledgedWeekDispatch: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDispatch(acknowledgedWeekDispatch: $acknowledgedWeekDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedWeekDispatchDocument,
    "\nmutation CreateMonthPowerPurchase($createMonthPowerPurchaseInput: CreateMonthPowerPurchaseInput!) {\n  createMonthPowerPurchase(createMonthPowerPurchaseInput: $createMonthPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n": types.CreateMonthPowerPurchaseDocument,
    "\nmutation AcknowledgedMonthDeclaration($acknowledgedMonthDeclaration: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDeclaration(acknowledgedMonthDeclaration: $acknowledgedMonthDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedMonthDeclarationDocument,
    "\nmutation AcknowledgedMonthDispatch($acknowledgedMonthDispatch: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDispatch(acknowledgedMonthDispatch: $acknowledgedMonthDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n": types.AcknowledgedMonthDispatchDocument,
    "\nquery Me {\n  me {\n    accessToken\n    data {\n      _id\n      userId\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      fName\n      lName\n      email\n      phone\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n": types.MeDocument,
    "\nquery Documents($docType: String!, $queryInput: QueryInput) {\n  documents(docType: $docType, queryInput: $queryInput) {\n    _id\n    createdAt\n    powerNo\n    declaration\n    dispatch\n    dis_dec\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n": types.DocumentsDocument,
    "\nquery Reports($queryInput: QueryInput) {\n  reports(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    reportId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    waterLevel\n    dwy\n    dwf\n    pws\n    rainFall\n    netEnergyOutput\n    waterRate\n    decCustomerId {\n      _id\n      company\n      name\n      phone\n      abbreviation\n    }\n    disCustomerId {\n      abbreviation\n      company\n      name\n      phone\n      _id\n    }\n    inflow {\n      amount\n      volume\n    }\n    outFlow {\n      amount\n      volume\n    }\n    otherWaterReleased {\n      amount\n      volume\n    }\n    spillWay {\n      amount\n      volume\n    }\n    activeStorage {\n      amount\n      average\n    }\n  }\n}\n": types.ReportsDocument,
    "\nquery Customers($queryInput: QueryInput) {\n  customers(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n": types.CustomersDocument,
    "\nquery GetPowerSources {\n  getPowerSources {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n": types.GetPowerSourcesDocument,
    "\nquery CustomerSelections {\n  customerSelections {\n    _id\n    name\n    company\n    abbreviation\n  }\n}\n": types.CustomerSelectionsDocument,
    "\nquery Chart($queryInput: QueryInput) {\n  chart(queryInput: $queryInput) {\n    labels\n    declarations\n    dispatchs\n    min\n    max\n  }\n}\n": types.ChartDocument,
    "\nquery SummaryEnergy($queryInput: QueryInput) {\n  summaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n": types.SummaryEnergyDocument,
    "\nquery MonthSummaryEnergy($queryInput: QueryInput) {\n  monthSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n": types.MonthSummaryEnergyDocument,
    "\nquery WeekSummaryEnergy($queryInput: QueryInput) {\n  weekSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n": types.WeekSummaryEnergyDocument,
    "\nquery DayDeclarations($queryInput: QueryInput) {\n  dayDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.DayDeclarationsDocument,
    "\nquery DayDispatchs($queryInput: QueryInput) {\n  dayDispatchs(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.DayDispatchsDocument,
    "\nquery MonthDeclarations($queryInput: QueryInput) {\n  monthDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.MonthDeclarationsDocument,
    "\nquery MonthDispatchs($queryInput: QueryInput) {\n  monthDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.MonthDispatchsDocument,
    "\nquery MonthPowerPurchase($monthPowerPurchaseId: String!) {\n  monthPowerPurchase(id: $monthPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n": types.MonthPowerPurchaseDocument,
    "\nquery DayPowerPurchase($dayPowerPurchaseId: String!) {\n  dayPowerPurchase(id: $dayPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    edited\n    decAcknowleged\n    disAcknowleged\n    price\n    powers\n    remarks\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    reservoirSituation {\n      upstreamLevel\n      downstreamLevel\n      totalStorage {\n        amount\n        average\n      }\n      activeStorage {\n        amount\n        average\n      }\n    }\n    machinesAvailability {\n      maxs\n      mins\n    }\n    waterDischarge {\n      turbineDischarge {\n        amount\n        average\n      }\n      spillwayDischarge {\n        amount\n        average\n      }\n      ecologicalDischarge {\n        amount\n        average\n      }\n    }\n    originalDetail {\n      totalPower\n      totalUnit\n      details {\n        powers\n        title\n      }\n      remarks\n      powers\n    }\n  }\n}\n": types.DayPowerPurchaseDocument,
    "\nquery Roles($queryInput: QueryInput) {\n  roles(queryInput: $queryInput) {\n    _id\n    roleId\n    name\n    createdAt\n    updatedAt\n  }\n}\n": types.RolesDocument,
    "\nquery Users($queryInput: QueryInput) {\n  users(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    userId\n    customerId {\n      _id\n      name\n      phone\n      type\n      company\n    }\n    roleId {\n      _id\n      name\n    }\n    fName\n    lName\n    email\n    phone\n    customers {\n      _id\n      name\n      phone\n      type\n      company\n    }\n  }\n}\n": types.UsersDocument,
    "\nquery WeekDeclarations($queryInput: QueryInput) {\n  weekDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.WeekDeclarationsDocument,
    "\nquery WeekDispatchs($queryInput: QueryInput) {\n  weekDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n": types.WeekDispatchsDocument,
    "\nquery AllWeeklyDocument($queryInput: QueryInput) {\n  allWeeklyDocument(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n": types.AllWeeklyDocumentDocument,
    "\nquery WeekPowerPurchase($weekPowerPurchaseId: String!) {\n  weekPowerPurchase(id: $weekPowerPurchaseId) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n": types.WeekPowerPurchaseDocument,
    "\nquery DayReport($queryInput: QueryInput) {\n  dayReport(queryInput: $queryInput) {\n    _id\n    createdAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n  }\n}\n": types.DayReportDocument,
    "\nquery GetReportYesterDay($customerId: String!) {\n  getReportYesterDay(customerId: $customerId) {\n       asYesterday\n    customer {\n      _id\n      fullLevel\n      minimumLevel\n      totalActiveStorage\n      unit\n    }\n  }\n}\n": types.GetReportYesterDayDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Login($loginInput: LoginInput!) {\n  login(loginInput: $loginInput) {\n    accessToken\n    data {\n      _id\n      fName\n      lName\n      email\n      phone\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n"): (typeof documents)["\nmutation Login($loginInput: LoginInput!) {\n  login(loginInput: $loginInput) {\n    accessToken\n    data {\n      _id\n      fName\n      lName\n      email\n      phone\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateReport($createReportInput: CreateReportInput!) {\n  createReport(createReportInput: $createReportInput) {\n    _id\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreateReport($createReportInput: CreateReportInput!) {\n  createReport(createReportInput: $createReportInput) {\n    _id\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateDayDeclaration($createDayDeclarationInput: CreateDayPowerPurchaseInput!) {\n  createDayDeclaration(createDayDeclarationInput: $createDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreateDayDeclaration($createDayDeclarationInput: CreateDayPowerPurchaseInput!) {\n  createDayDeclaration(createDayDeclarationInput: $createDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateWeekPowerPurchase($createWeekPowerPurchaseInput: CreateWeekPowerPurchaseInput!) {\n  createWeekPowerPurchase(createWeekPowerPurchaseInput: $createWeekPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreateWeekPowerPurchase($createWeekPowerPurchaseInput: CreateWeekPowerPurchaseInput!) {\n  createWeekPowerPurchase(createWeekPowerPurchaseInput: $createWeekPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedDayDispatch($acknowledgedDayDispatchInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDispatch(acknowledgedDayDispatchInput: $acknowledgedDayDispatchInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedDayDispatch($acknowledgedDayDispatchInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDispatch(acknowledgedDayDispatchInput: $acknowledgedDayDispatchInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedDayDeclaration($acknowledgedDayDeclarationInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDeclaration(acknowledgedDayDeclarationInput: $acknowledgedDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedDayDeclaration($acknowledgedDayDeclarationInput: UpdateDayPowerPurchaseInput!) {\n  acknowledgedDayDeclaration(acknowledgedDayDeclarationInput: $acknowledgedDayDeclarationInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateCustomer($createCustomerInput: CreateCustomerInput!) {\n  createCustomer(createCustomerInput: $createCustomerInput) {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n  }\n}\n"): (typeof documents)["\nmutation CreateCustomer($createCustomerInput: CreateCustomerInput!) {\n  createCustomer(createCustomerInput: $createCustomerInput) {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateCustomer($updateCustomerInput: UpdateCustomerInput!) {\n  updateCustomer(updateCustomerInput: $updateCustomerInput) {\n    _id\n    type\n    name\n    company\n  }\n}\n"): (typeof documents)["\nmutation UpdateCustomer($updateCustomerInput: UpdateCustomerInput!) {\n  updateCustomer(updateCustomerInput: $updateCustomerInput) {\n    _id\n    type\n    name\n    company\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation RemoveCustomer($removeCustomerId: String!) {\n  removeCustomer(id: $removeCustomerId) {\n    _id\n    type\n    name\n    company\n  }\n}\n"): (typeof documents)["\nmutation RemoveCustomer($removeCustomerId: String!) {\n  removeCustomer(id: $removeCustomerId) {\n    _id\n    type\n    name\n    company\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateUser($createUserInput: CreateUserInput!) {\n  createUser(createUserInput: $createUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"): (typeof documents)["\nmutation CreateUser($createUserInput: CreateUserInput!) {\n  createUser(createUserInput: $createUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"): (typeof documents)["\nmutation UpdateUser($updateUserInput: UpdateUserInput!) {\n  updateUser(updateUserInput: $updateUserInput) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation RemoveUser($removeUserId: String!) {\n  removeUser(id: $removeUserId) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"): (typeof documents)["\nmutation RemoveUser($removeUserId: String!) {\n  removeUser(id: $removeUserId) {\n    _id\n    fName\n    lName\n    email\n    phone\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedWeekDeclaration($acknowledgedWeekDeclaration: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDeclaration(acknowledgedWeekDeclaration: $acknowledgedWeekDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedWeekDeclaration($acknowledgedWeekDeclaration: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDeclaration(acknowledgedWeekDeclaration: $acknowledgedWeekDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedWeekDispatch($acknowledgedWeekDispatch: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDispatch(acknowledgedWeekDispatch: $acknowledgedWeekDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedWeekDispatch($acknowledgedWeekDispatch: UpdateWeekPowerPurchaseInput!) {\n  acknowledgedWeekDispatch(acknowledgedWeekDispatch: $acknowledgedWeekDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateMonthPowerPurchase($createMonthPowerPurchaseInput: CreateMonthPowerPurchaseInput!) {\n  createMonthPowerPurchase(createMonthPowerPurchaseInput: $createMonthPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"): (typeof documents)["\nmutation CreateMonthPowerPurchase($createMonthPowerPurchaseInput: CreateMonthPowerPurchaseInput!) {\n  createMonthPowerPurchase(createMonthPowerPurchaseInput: $createMonthPowerPurchaseInput) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedMonthDeclaration($acknowledgedMonthDeclaration: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDeclaration(acknowledgedMonthDeclaration: $acknowledgedMonthDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedMonthDeclaration($acknowledgedMonthDeclaration: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDeclaration(acknowledgedMonthDeclaration: $acknowledgedMonthDeclaration) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation AcknowledgedMonthDispatch($acknowledgedMonthDispatch: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDispatch(acknowledgedMonthDispatch: $acknowledgedMonthDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"): (typeof documents)["\nmutation AcknowledgedMonthDispatch($acknowledgedMonthDispatch: UpdateMonthPowerPurchaseInput!) {\n  acknowledgedMonthDispatch(acknowledgedMonthDispatch: $acknowledgedMonthDispatch) {\n    _id\n    createdAt\n    updatedAt\n    totalPower\n    totalUnit\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Me {\n  me {\n    accessToken\n    data {\n      _id\n      userId\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      fName\n      lName\n      email\n      phone\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Me {\n  me {\n    accessToken\n    data {\n      _id\n      userId\n      roleId {\n        _id\n        name\n        paths\n        permissions\n      }\n      fName\n      lName\n      email\n      phone\n      customerId {\n        email\n        logo\n        name\n        phone\n        unit\n        type\n        _id\n        minimumLevel\n        totalActiveStorage\n        floodLevel\n        fullLevel\n        deadLevel\n        abbreviation\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Documents($docType: String!, $queryInput: QueryInput) {\n  documents(docType: $docType, queryInput: $queryInput) {\n    _id\n    createdAt\n    powerNo\n    declaration\n    dispatch\n    dis_dec\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"): (typeof documents)["\nquery Documents($docType: String!, $queryInput: QueryInput) {\n  documents(docType: $docType, queryInput: $queryInput) {\n    _id\n    createdAt\n    powerNo\n    declaration\n    dispatch\n    dis_dec\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Reports($queryInput: QueryInput) {\n  reports(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    reportId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    waterLevel\n    dwy\n    dwf\n    pws\n    rainFall\n    netEnergyOutput\n    waterRate\n    decCustomerId {\n      _id\n      company\n      name\n      phone\n      abbreviation\n    }\n    disCustomerId {\n      abbreviation\n      company\n      name\n      phone\n      _id\n    }\n    inflow {\n      amount\n      volume\n    }\n    outFlow {\n      amount\n      volume\n    }\n    otherWaterReleased {\n      amount\n      volume\n    }\n    spillWay {\n      amount\n      volume\n    }\n    activeStorage {\n      amount\n      average\n    }\n  }\n}\n"): (typeof documents)["\nquery Reports($queryInput: QueryInput) {\n  reports(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    reportId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    waterLevel\n    dwy\n    dwf\n    pws\n    rainFall\n    netEnergyOutput\n    waterRate\n    decCustomerId {\n      _id\n      company\n      name\n      phone\n      abbreviation\n    }\n    disCustomerId {\n      abbreviation\n      company\n      name\n      phone\n      _id\n    }\n    inflow {\n      amount\n      volume\n    }\n    outFlow {\n      amount\n      volume\n    }\n    otherWaterReleased {\n      amount\n      volume\n    }\n    spillWay {\n      amount\n      volume\n    }\n    activeStorage {\n      amount\n      average\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Customers($queryInput: QueryInput) {\n  customers(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n"): (typeof documents)["\nquery Customers($queryInput: QueryInput) {\n  customers(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetPowerSources {\n  getPowerSources {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n"): (typeof documents)["\nquery GetPowerSources {\n  getPowerSources {\n    _id\n    type\n    name\n    company\n    abbreviation\n    email\n    logo\n    unit\n    address\n    phone\n    floodLevel\n    fullLevel\n    minimumLevel\n    deadLevel\n    totalActiveStorage\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery CustomerSelections {\n  customerSelections {\n    _id\n    name\n    company\n    abbreviation\n  }\n}\n"): (typeof documents)["\nquery CustomerSelections {\n  customerSelections {\n    _id\n    name\n    company\n    abbreviation\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Chart($queryInput: QueryInput) {\n  chart(queryInput: $queryInput) {\n    labels\n    declarations\n    dispatchs\n    min\n    max\n  }\n}\n"): (typeof documents)["\nquery Chart($queryInput: QueryInput) {\n  chart(queryInput: $queryInput) {\n    labels\n    declarations\n    dispatchs\n    min\n    max\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery SummaryEnergy($queryInput: QueryInput) {\n  summaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"): (typeof documents)["\nquery SummaryEnergy($queryInput: QueryInput) {\n  summaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MonthSummaryEnergy($queryInput: QueryInput) {\n  monthSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"): (typeof documents)["\nquery MonthSummaryEnergy($queryInput: QueryInput) {\n  monthSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery WeekSummaryEnergy($queryInput: QueryInput) {\n  weekSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"): (typeof documents)["\nquery WeekSummaryEnergy($queryInput: QueryInput) {\n  weekSummaryEnergy(queryInput: $queryInput) {\n    declaration\n    dispatch\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery DayDeclarations($queryInput: QueryInput) {\n  dayDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery DayDeclarations($queryInput: QueryInput) {\n  dayDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery DayDispatchs($queryInput: QueryInput) {\n  dayDispatchs(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery DayDispatchs($queryInput: QueryInput) {\n  dayDispatchs(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MonthDeclarations($queryInput: QueryInput) {\n  monthDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery MonthDeclarations($queryInput: QueryInput) {\n  monthDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MonthDispatchs($queryInput: QueryInput) {\n  monthDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery MonthDispatchs($queryInput: QueryInput) {\n  monthDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MonthPowerPurchase($monthPowerPurchaseId: String!) {\n  monthPowerPurchase(id: $monthPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"): (typeof documents)["\nquery MonthPowerPurchase($monthPowerPurchaseId: String!) {\n  monthPowerPurchase(id: $monthPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    monthId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery DayPowerPurchase($dayPowerPurchaseId: String!) {\n  dayPowerPurchase(id: $dayPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    edited\n    decAcknowleged\n    disAcknowleged\n    price\n    powers\n    remarks\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    reservoirSituation {\n      upstreamLevel\n      downstreamLevel\n      totalStorage {\n        amount\n        average\n      }\n      activeStorage {\n        amount\n        average\n      }\n    }\n    machinesAvailability {\n      maxs\n      mins\n    }\n    waterDischarge {\n      turbineDischarge {\n        amount\n        average\n      }\n      spillwayDischarge {\n        amount\n        average\n      }\n      ecologicalDischarge {\n        amount\n        average\n      }\n    }\n    originalDetail {\n      totalPower\n      totalUnit\n      details {\n        powers\n        title\n      }\n      remarks\n      powers\n    }\n  }\n}\n"): (typeof documents)["\nquery DayPowerPurchase($dayPowerPurchaseId: String!) {\n  dayPowerPurchase(id: $dayPowerPurchaseId) {\n    _id\n    createdAt\n    updatedAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    edited\n    decAcknowleged\n    disAcknowleged\n    price\n    powers\n    remarks\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    reservoirSituation {\n      upstreamLevel\n      downstreamLevel\n      totalStorage {\n        amount\n        average\n      }\n      activeStorage {\n        amount\n        average\n      }\n    }\n    machinesAvailability {\n      maxs\n      mins\n    }\n    waterDischarge {\n      turbineDischarge {\n        amount\n        average\n      }\n      spillwayDischarge {\n        amount\n        average\n      }\n      ecologicalDischarge {\n        amount\n        average\n      }\n    }\n    originalDetail {\n      totalPower\n      totalUnit\n      details {\n        powers\n        title\n      }\n      remarks\n      powers\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Roles($queryInput: QueryInput) {\n  roles(queryInput: $queryInput) {\n    _id\n    roleId\n    name\n    createdAt\n    updatedAt\n  }\n}\n"): (typeof documents)["\nquery Roles($queryInput: QueryInput) {\n  roles(queryInput: $queryInput) {\n    _id\n    roleId\n    name\n    createdAt\n    updatedAt\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Users($queryInput: QueryInput) {\n  users(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    userId\n    customerId {\n      _id\n      name\n      phone\n      type\n      company\n    }\n    roleId {\n      _id\n      name\n    }\n    fName\n    lName\n    email\n    phone\n    customers {\n      _id\n      name\n      phone\n      type\n      company\n    }\n  }\n}\n"): (typeof documents)["\nquery Users($queryInput: QueryInput) {\n  users(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    userId\n    customerId {\n      _id\n      name\n      phone\n      type\n      company\n    }\n    roleId {\n      _id\n      name\n    }\n    fName\n    lName\n    email\n    phone\n    customers {\n      _id\n      name\n      phone\n      type\n      company\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery WeekDeclarations($queryInput: QueryInput) {\n  weekDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery WeekDeclarations($queryInput: QueryInput) {\n  weekDeclarations(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery WeekDispatchs($queryInput: QueryInput) {\n  weekDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"): (typeof documents)["\nquery WeekDispatchs($queryInput: QueryInput) {\n  weekDispatchs(queryInput: $queryInput) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n    originalDetail {\n      totalPower\n      totalUnit\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery AllWeeklyDocument($queryInput: QueryInput) {\n  allWeeklyDocument(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"): (typeof documents)["\nquery AllWeeklyDocument($queryInput: QueryInput) {\n  allWeeklyDocument(queryInput: $queryInput) {\n    _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    decUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    decCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n      email\n    }\n    disUserId {\n      _id\n      email\n      fName\n      lName\n      phone\n    }\n    disCustomerId {\n      _id\n      abbreviation\n      address\n      company\n      name\n      phone\n      logo\n      type\n      unit\n    }\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery WeekPowerPurchase($weekPowerPurchaseId: String!) {\n  weekPowerPurchase(id: $weekPowerPurchaseId) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"): (typeof documents)["\nquery WeekPowerPurchase($weekPowerPurchaseId: String!) {\n  weekPowerPurchase(id: $weekPowerPurchaseId) {\n     _id\n    createdAt\n    updatedAt\n    weekId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n    edited\n    decAcknowleged\n    disAcknowleged\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery DayReport($queryInput: QueryInput) {\n  dayReport(queryInput: $queryInput) {\n    _id\n    createdAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n  }\n}\n"): (typeof documents)["\nquery DayReport($queryInput: QueryInput) {\n  dayReport(queryInput: $queryInput) {\n    _id\n    createdAt\n    dayId\n    powerNo\n    totalPower\n    totalUnit\n    remark\n    powers\n    remarks\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetReportYesterDay($customerId: String!) {\n  getReportYesterDay(customerId: $customerId) {\n       asYesterday\n    customer {\n      _id\n      fullLevel\n      minimumLevel\n      totalActiveStorage\n      unit\n    }\n  }\n}\n"): (typeof documents)["\nquery GetReportYesterDay($customerId: String!) {\n  getReportYesterDay(customerId: $customerId) {\n       asYesterday\n    customer {\n      _id\n      fullLevel\n      minimumLevel\n      totalActiveStorage\n      unit\n    }\n  }\n}\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;